---
title: Create a Windows Service with Ruby - Part 2
layout: post
---

This is a test for things to come

{% highlight ruby %}
require 'rubygems'
require 'win32/service'
include Win32

unless defined?(Ocra)
  Service.create({
    service_name: "iorderautoprint",
    host: nil,
    service_type: Service::WIN32_OWN_PROCESS,
    description: "Proxy for iOrder Service",
    start_type: Service::AUTO_START,
    error_control: Service::ERROR_NORMAL,
    binary_path_name: "#{`echo %cd%`.chomp}\\service.exe",
    load_order_group: 'Network',
    dependencies: ['W32Time', 'Schedule'],
    display_name: 'iOrder Auto Print'
  })

  Service.start("iorderautoprint")
end
{% endhighlight %}

{% highlight ruby %}
require 'rubygems'
require 'socket'
require 'yaml'
require 'json'
require 'httparty'

require 'win32/daemon'
include Win32

MultiJson.use(:json_pure)

class PrintDocument
  include HTTParty
  
  def initialize(url, access_token)
    self.class.base_uri url
    @access_token = access_token
  end
  
  def params
    {headers: {"Authorization" => "Token token=\"#{@access_token}\""}}
  end
  
  def index
    self.class.get("/print_documents", params)
  end
  
  def complete(order_id) 
    self.class.post("/print_documents/#{order_id}/complete", params)
  end
end

class PrintDaemon < Daemon
  def service_main
      log 'started'
      while running? # will windows service is running
        begin
          client = PrintDocument.new(settings['webservice_url'], settings['access_token']) # create rest client
          TCPSocket.open(settings['printer_host'], settings['printer_port']) do |s| # open tcp port to printer
            sleep 2 # wait for printer
            resp = client.index() # get print documents response
            if resp.code == 200 # check if response successful
              resp.each do |pd| # iterate through print documents
                s.puts pd['data'] # write data to printer
                client.complete(pd['id']) # mark order as printer
                log "Printed #{pd['id']}" # log print action
              end
            else
              log "Error #{resp.code} #{resp.response.message}" # log error
            end
          end
        rescue Exception => e
          log "Exception #{e.message}"
        end
        sleep 10 # wait 10 seconds before checking again
      end
  end

  def service_stop
    log "ended"
    exit!
  end
  
  def log(text)
    File.open(file_path(settings['log_file']), 'a') { |f| f.puts "#{Time.now}: #{text}" } if settings['log_file']
  end
  
  def settings
    YAML.load_file(file_path('settings.yml'))
  end
  
  def file_path(file)
    File.expand_path("../#{file}", ENV["OCRA_EXECUTABLE"] || __FILE__)
  end
end

PrintDaemon.mainloop unless defined?(Ocra)
{% endhighlight %}

{% highlight ruby %}
require 'rubygems'
require 'win32/service'
include Win32

SERVICE = 'iorderautoprint'

unless defined?(Ocra)
  Service.stop(SERVICE) if Service.status(SERVICE).controls_accepted.include? "stop" rescue nil
  Service.delete(SERVICE)
end
{% endhighlight %}